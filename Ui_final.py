# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\Users\chenh\Desktop\Study\Data Science\final\final.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import tensorflow as tf
from tensorflow import keras
from keras.models import model_from_json
import numpy as np
from PIL import Image
import os
import random
from gtts import gTTS
from io import BytesIO
from pydub import AudioSegment
from pydub.playback import play
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def __init__(self):
        self.imgPath = 'original'
    def getName(self):
        return self.imgPath
    def setName(self,value):
        self.imgPath = value


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(350, 35, 100, 30))
        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(200, 100, 400, 400))
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("background:white")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(350, 535, 100, 30))
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.openimage)
        self.pushButton_2.clicked.connect(self.diagnose)


    def openimage(self):
        #Select and display
        imgName, imgType = QtWidgets.QFileDialog.getOpenFileName(self.centralwidget, "OpenImage", "", "*.jpg;;All Files(*)")
        print("show path")
        print(imgName)
        self.setName(imgName)
        jpg = QtGui.QPixmap(imgName).scaled(self.label.width(), self.label.height())
        self.label.setPixmap(jpg)
    
    def diagnose(self):
        #Load image to np
        imgName = self.getName()
        print("get path")
        print(imgName)
        read = lambda imname: np.asarray(Image.open(imname).convert("RGB"))
        image_test = [read(imgName)]
        test = np.array(image_test, dtype='uint8')
        test = test/255
        #Get result
        my_model = model_from_json(open('model.json').read())
        my_model.load_weights('model.h5')
        ans_list = my_model.predict(test).tolist()
        result = ans_list[0][0]
        result = round(result * 100, 2)
        #Diagnose
        if result > 50:
            report = "The probability that you have a benign cancer is " + str(result) + "%"
            print(report)
        else:
            report = "The probability that you have a malignant cancer is " + str(1-result) + "%"
            print(report)
        mp3_fp = BytesIO()
        tts = gTTS(report, lang='en')
        
        tts.write_to_fp(mp3_fp)
        sound = AudioSegment.from_mp3(BytesIO(mp3_fp.getvalue()))
        play(sound)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "CancerDiagnose"))
        self.pushButton.setText(_translate("MainWindow", "OpenImage"))
        self.label.setText(_translate("MainWindow", "ShowImage"))
        self.pushButton_2.setText(_translate("MainWindow", "Diagnose"))

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())